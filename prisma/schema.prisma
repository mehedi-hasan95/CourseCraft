// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum userRole {
  USER
  TEACHER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          userRole  @default(USER)
  accounts      Account[]
  course        Course[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Categories {
  id     String   @id @default(uuid())
  name   String   @unique
  url    String   @unique
  course Course[]
}

model Course {
  id          String      @id @default(uuid())
  userId      String
  title       String?
  description String?     @db.Text
  image       String?
  price       Float?
  isPublished Boolean     @default(false)
  categoryId  String?
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories  Categories? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt()
  attachment Attachment[]

  @@index([userId])
  @@index([categoryId])
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([courseId])
}
